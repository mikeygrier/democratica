{
    words_file => "/usr/share/dict/words",

    # indicate deployment type, and then its role, separated by a dot.  deployment names for types and roles must contain 
    # only letters numbers, and underscores.
    #
    # Deployment Types:
    # standard      database, app servers, async workers, and web server are all configured and deployed on the same host
    # development   same as standard really, just for keeping notes, and allowing for an extra configuration file.
    # micro         database, a single app server, a single async worker, and web server, all configured and deployed on the 
    #               same host, designed for low-memory environments, and optimizations will be made to cache sizes accordingly
    # flock         full fledged flock where a full-time flock coordinator node is present, and has resourses at its disposal
    #               to scale the environment up and down accordingly.  the database server is also hosted on on a separate 
    #               instance.  flocks themselves can have multiple deployment strategies but these are defined within the
    #               flock_coordinator.conf configuration file

    # The service role fragment of the deployment profile speaks to what role MeritCommons is expected to play within the 
    # organization.  For example, is this just a service that users can log in to?  or is this the central Identity Provider
    # for the organization.  The CAS, SAML2, and OAuth2 plugins will all consider this value when deciding how to handle
    # certain types of requests.
    #
    # Service Roles:
    # idp           an identity provider for an organization, assumes that it is the primary source of identity.
    # sp            a service provider role.  with this deployment type, MeritCommons ssumes it is only a service provider and 
    #               will not issue SAML2 assertions, only Requests for Authentication

    deployment_profile => 'development.idp',

    # max message size, limits file upload size
    max_message_size => 1073741824, # 1GB

    # here lies MeritCommons::Model::System, may it rest in peace.
    administrator_email => 'ak1520@wayne.edu',
    administrator_common_name => 'Michael Gregorowicz',
    hostname => 'localhost',
    port => 3000,
    https_enabled => 1,

    # used to generate meritcommons's x.509 cert  
    service_country => 'US',
    service_locality => 'Detroit',
    service_state => 'Michigan',
    service_organization => 'Wayne State University',
    service_organizational_unit => 'Computing & Information Technology',

    # how big can a message be before it's truncated?
    truncate_messages_at => 1200,

    # this is used to resolve identities, serve keys, etc.
    identity_server => 'http://meritcommons-dev.wayne.edu:3000',

    # this is the front door of the app (full url, often the same as the identity server)
    front_door_url => 'http://meritcommons-dev.wayne.edu:3000',

    # this is probably just the host in front_door_url
    front_door_host => 'meritcommons-dev.wayne.edu',

    # A link to a password reset page of some kind. If none is set, the link doesn't appear.
    # forgot_password_link => "",

    # redirect all http:// traffic to https:// (requires standard ports)
    force_ssl => 0, 

    # how long do we leave idle websockets open for
    websocket_inactivity_timeout => '300',

    # what websocket should we tell users to connect to when they ask us?
    advertised_websocket => 'ws://meritcommons-dev.wayne.edu:3000/hydrant',

    # default authenticator, runs "default" sub in namespace by default, can specify path to full sub.
    authentication_provider => 'MeritCommons::Helper::LocalAuth',

    # syslog for access logs
    #flock_syslog => [qw/ 192.168.143.101 /],

    # authentication logs
    #auth_log_syslog => [qw/ 192.168.143.101 /],
    
    # error logs
    #error_log_syslog => [qw/ 192.168.143.101 /],
 
    # audit logs
    #audit_log_syslog => [qw/ 192.168.143.101 /],

    # meritcommons logger will ship to syslog
    syslog => {
        # log types supported: AUTH_LOG, ACCESS_LOG
        AUTH_LOG => [qw/
            192.168.0.200
        /],
    },

    session_length => 28800,

    help_url => 'http://computing.wayne.edu/meritcommonshelp',

    # comment these out of you want to allow logging to the publisher.
    access_log => "$ENV{MERITCOMMONS_HOME}/../var/log/access.log",
    auth_log => "$ENV{MERITCOMMONS_HOME}/../var/log/auth.log",
    audit_log => "$ENV{MERITCOMMONS_HOME}/../var/log/audit.log",
    
    # this is ignored so long as access_log and auth_log are set.
    log_to_publisher => 0,

    # secret keys for external authentication pages
    external_auth_secrets => [
        {
            regex => qr/^https:\/\/login.example.edu\/.*/,
            secret => 'I&@EfRl.6)cHsBJwsdVa5jw3@R)F(qQVpw.6p3l!c!8QzU7#Ll#6b4Av*qXxYbFg',
        },
    ],

    login_token_expire_time => 120,

    # system log level for publisher logs
    system_log_level => "debug",

    # what domain the cookies are set for.
    cookie_domain => 'meritcommons-dev.wayne.edu',
    cookie_top_domain => '.wayne.edu',

    # directory in which to store local assets (profile pictures, etc)
    local_asset_path => '/usr/local/meritcommons/var/public',

    # external asset base (for stuff like s3)
    #external_asset_base => 'https://s3.amazonaws.com/meritcommons.example.com/',
    #external_asset_path => '/usr/local/meritcommons/var/s3',

    # for memcache.
    #memcached_servers => ['192.168.143.101'],

    # toogle FlockVPN 1 == on, 0 == off.
    flock_vpn => 0,

    # the name of the meritcommons flock network interface
    flock_netif_name => 'aca0',

    # the subnet you want to use for FlockVPN
    flock_subnet => '10.0.0.0/24',

    # 32 character password to protect your flock's comms.
    flock_password => 'jCKcNWzCUXK7e5yargcCiFlfik44TIxj',

    # port for the FlockVPN, supernode is this + 1.
    flock_port => '1143',

    # flock supernode address
    flock_supernode_ip => '192.168.0.52',

    # flock network name (you shouldn't have to change this)
    flock_network_name => 'meritcommons-flock',

    ## FLOCK COORDINATOR OPTIONS

    # is this node a flock coordinator? 1 == yes, 0 == no
    flock_coordinator => 0,

    # aws region this flock is in
    flock_aws_region => 'us-east-1',

    # AWS tag you tag your flock instances with
    flock_aws_node_tag => 'flock-node',

    # AWS security group to assign to your flock nodes
    flock_aws_security_groups => ['meritcommons-app-server'],

    # the number of seconds to wait after a scale up event has finished before scaling up again
    flock_aws_scaleup_cooldown => 120,

    # the number of seconds to wait after any scale event has happened before scaling down
    flock_aws_scaledown_cooldown => 3570,

    # when scaling vertically, the number of seconds lower performing nodes being replaced remain up along side their faster replacements
    flock_aws_scale_overlap => 60,

    # CIDR of VPC subnet
    flock_aws_vpc_subnet => '10.10.0.0/24',

    # the AWS Route 53 hosted zone id
    flock_aws_dns_hosted_zone => 'Z3J7PRMFUCPJXA',

    # start the flock when the coordinator starts?
    flock_autostart => 1,

    # what zmq stats should cause the flock to scale up or down?  Valid values are: NODE_LOAD and NODE_CPU.
    flock_scale_on => 'NODE_LOAD',

    # the scale pattern that this flock coordinator should flollow
    flock_aws_scale_pattern => [
        {
            nodes => 1,
            instance_type => 'c3.large',
            hypnotoad_workers => 8,
            minion_workers => 4,
            description => "One c3.large instance; 2 Compute Cores",
            max_load => ['2', '1.5', '1'], # if these averages are observed across all nodes, advance to the next tier
            max_cpu => [80, 70], # 1m, 5m cpu% used
        },
        {
            nodes => 2,
            instance_type => 'c3.large',
            hypnotoad_workers => 8,
            minion_workers => 4,
            description => "Two c3.large instances; 4 Compute Cores",
            max_load => ['2', '1.5', '1'], # if these averages are observed across all nodes, advance to the next tier
            min_load => ['0', '0', '0'], # if these averages are observed across all nodes, descend to the previous tier
            max_cpu => [80, 70], # 1m, 5m cpu% used
            min_cpu => [10, 10], # 1m, 5m cpu% used
        },
        {
            nodes => 2,
            instance_type => 'c3.xlarge',
            hypnotoad_workers => 16,
            minion_workers => 8,
            description => "Two c3.xlarge instances; 8 Compute Cores",
            max_load => ['4', '3', '2'], # if these averages are observed across all nodes, advance to the next tier
            min_load => ['1', '0.5', '0.25'], # if these averages are observed across all nodes, descend to the previous tier
            max_cpu => [80, 70], # 1m, 5m cpu% used
            min_cpu => [10, 10], # 1m, 5m cpu% used
        },
        {
            nodes => 2,
            instance_type => 'c3.2xlarge',
            hypnotoad_workers => 32,
            minion_workers => 16,
            description => "Two c3.2xlarge instances; 16 Compute Cores",
            max_load => ['8', '6', '4'], # if these averages are observed across all nodes, advance to the next tier
            min_load => ['2', '1', '0.5'], # if these averages are observed across all nodes, descend to the previous tier
            max_cpu => [80, 70], # 1m, 5m cpu% used
            min_cpu => [10, 10], # 1m, 5m cpu% used
        },
        { 
            nodes => 3,
            instance_type => 'c3.2xlarge',
            hypnotoad_workers => 32,
            minion_workers => 16,
            description => "Three c3.2xlarge instances; 24 Compute Cores",
            max_load => ['8', '6', '4'], # if these averages are observed across all nodes, advance to the next tier
            min_load => ['2', '1', '0.5'], # if these averages are observed across all nodes, descend to the previous tier
            max_cpu => [80, 70], # 1m, 5m cpu% used
            min_cpu => [10, 10], # 1m, 5m cpu% used
        },
        {
            nodes => 4,
            instance_type => 'c3.2xlarge',
            hypnotoad_workers => 32,
            minion_workers => 16,
            description => "Four c3.2xlarge instances; 32 Compute Cores",
            min_load => ['2', '1', '0.5'], # if these averages are observed across all nodes, descend to the previous tier
            min_cpu => [10, 10], # 1m, 5m cpu% used
        },
    ],

    ## END FLOCK COORDINATOR OPTIONS

    #publish_to => ['ipc:///var/tmp/1313', 'flock://find_publisher'], # where the publisher binds
    #publishers => ['ipc:///var/tmp/1313', 'flock://find_publisher'], # where the subscribers connect to

    # for the ZeroMQ Publisher
    publish_to => ['ipc:///var/tmp/1313'], # where the publisher binds
    publishers => ['ipc:///var/tmp/1313'], # where the subscribers connect to

    # use to enable anonymous users to see RSS feeds for streams where requires_subscriber_authorization is false
    #anonymous_stream_rss_feeds => 1,

    user => 'meritcommons', # the user the publisher & the system runs as

    # moved this closer to the top, this contains most of what was in MeritCommons::Model::System::AuthenticationProfile, anyway.
    ldap_connect_info => {
        # privileged account
        ldap_priv_bind_dn => 'cn=Script Manager, ou=System Groups, ou=Groups, dc=wayne, dc=edu',

        # privileged account password
        ldap_priv_bind_pass => '',

        # how to connect to the LDAP resource
        ldap_host => 'ldap.wayne.edu',

        # ldap scheme
        ldap_scheme => 'ldaps',

        # ldap port
        ldap_port => 636,

        # where to start searching for users
        base_dn => 'dc=wayne,dc=edu',

        # how to search for users, an LDAP filter
        search_filter => 'uid=${username}',

        # users identified by
        unique_id_field => 'uid',
    },

    database_connect_info => {
        primary => ['dbi:Pg:host=localhost;dbname=meritcommons', 'meritcommons', 'abcd1234', {pg_enable_utf8 => 1}],
    },

    #plugins => ['MeritCommons::Plugin::Banner', 'MeritCommons::Plugin::Wayne', 'MeritCommons::Plugin::CasServer'],

    plugins => ['MeritCommons::Plugin::CasServer'],

    sphinx => {
        dsn => 'dbi:mysql:host=127.0.0.1;port=9306;mysql_enable_utf8=1',
        host => 'localhost',
        port => 9312,
    },

    # how long do we cache recipient search results for?
    recipient_search_cache_timeout => 14400,

    # hypnotoad specific configuration
    hypnotoad => {
        listen => ['http://*:80', 'https://*:443'],
        workers => 4,
        user => 'vagrant',
    },

    # Set theme here. Will be the same name as the theme folder in `theme/`
    theme => 'meritcommons',

    status_prompts => [
        "What's new in Midtown?",
        "What's on your mind?",
        "What's happening?",
        "What's going on?",
        "What happened in class today?",
        "What's up, warrior?",
    ],

    latex => {
        tmpdir      => '/tmp',
        imgoutdir   => '/usr/local/meritcommons/var/public/mathimg',
        imgurlpath  => '/mathimg',
    },    

    stream_reserved_names => [
        'MeritCommons',
        'WSU',
        'Wayne State',
        qr/^[a-zA-Z]{2}\d{4}$/, # AccessIDs
        qr/^[A-Z0-9]{2,3}_\d{4}_\d{4}_[A-Z0-9]{1,5}(_[0-9]{5})?$/ # Blackboard Course IDs
    ],

    # used for processing image uploads
    default_transform => 'medium',

    image_transforms => {
        'tiny' => [
            {
                'thumbnail' => {
                    'geometry' => '30x30^',
                },
                'autoOrient' => {},
            },
            {
                'extent' => {
                    'geometry' => '30x30',
                    'gravity'  => 'center',
                },
                'autoOrient' => {},
            },
        ],
        'thumbnail' => [
            {
                'thumbnail' => {
                    'geometry' => '64x64^',
                },
                'autoOrient' => {},
            },
            {
                'extent' => {
                    'geometry' => '64x64',
                    'gravity'  => 'center',
                },
                'autoOrient' => {},
            },
        ],
        'large' => [
            {
                'resize' => {
                    'geometry' => '600x>',
                },
                'autoOrient' => {},
            },
        ],
        'medium' => [
            {
                'resize' => {
                    'geometry' => '400x>',
                },
                'autoOrient' => {},
            },
        ],
        'small' => [
            {
                'resize' => {
                    'geometry' => '300x>',
                },
                'autoOrient' => {},
            },
        ],
    },

    search_providers => {
        wayne => {
            action => 'https://wayne.edu/search/',
            placeholder => 'Search wayne.edu',
            query_param => 'q',
            extra => {
                type => 'all',
            },
        },
        google => {
            action => 'https://www.google.com/search',
            placeholder => 'Search Google',
            query_param => 'q',
        },
    },
    
    # bloom config using TCP on localhost...
    # bloomd_config => {
    #     host => '127.0.0.1',
    #     port => 8673,
    #     timeout => 0.2,
    # },

    # defining one filter called BlockFilter
    # bloom_filters => {
    #     block => 'BlockFilter',
    # },

    smtp_host => 'connect.wayne.edu',
    smtp_port => '587',
    smtp_auth => 'LOGIN',
    smtp_username => 'zz9998',
    smtp_password => '',
    smtp_from => 'MeritCommons <meritcommons@wayne.edu>',

    # Provoke Morbo the Annihilator (SIGKILL for devdaemon)
    # brutal_morbo => 1,

    # Default title for the sidebar subscription listing block
    #default_subscription_block_title => 'Other Streams',

    # Default title for the resources section
    default_link_title => 'WSU Resources',

    # selenium options, useful for testing
    selenium => {
        browsers => [qw/chrome ie firefox/],
        remote => {
            remote_server_addr => 'selenium-host',
            port => 4444,
            platform => 'ANY',
        },
    },

    system_maintenance_notice_schedule => [
        {
            time => '* * 0 * * 0 +8h',
            timezone => 'America/Detroit',
            message => 'Some university systems may be unavailable during our routine maintenance window from 2am until 8am. Please see our <a href="https://computing.wayne.edu/status/" target="_blank">System Status Dashboard</a> for details.',
        },
    ],
};
